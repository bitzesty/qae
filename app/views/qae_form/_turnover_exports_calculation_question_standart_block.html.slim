- for c in question.by_year_conditions
  - question_visible = question.fields_count == c.years

  .js-conditional-question.turnover-exports-calculation-wrapper class=(class_names("show-question" => question_visible)) data=(c.question_value.respond_to?(:call) ? c.options.dig(:data).merge(question: question.step.form[c.question_key].parameterized_title) : {question: question.step.form[c.question_key].parameterized_title, value: c.question_value})
    .row
      - (1..c.years).each do |y|
        div class="span-financial span-4"
          label for=question.input_name(suffix: "#{y}of#{c.years}")
            span.js-year-end.show-default data-year="#{y}of#{c.years}" data-year-diff="#{::Utils::Diff.calc(c.years, y)}"
              span.js-year-default.govuk-label
                ' Financial year
                = y
                - if y == c.years
                  '  (most recent)
              span.js-year-text.hide-if-empty
          span.govuk-body
            span.currency-unit
              ' Â£
            - turnover_q = question.form[question.turnover_question]
            - exports_q = question.form[question.exports_question]
            - if turnover_q.input_value(suffix: "#{y}of#{c.years}").present? && exports_q.input_value(suffix: "#{y}of#{c.years}").present?
              - sales_value = turnover_q.input_value(suffix: "#{y}of#{c.years}").to_s.delete(",").to_i - exports_q.input_value(suffix: "#{y}of#{c.years}").to_s.delete(",").to_i
            - else
              - sales_value = "-"
            span.js-sales-value.fs-calculated data-year="#{y}of#{c.years}" data-turnover=question.turnover_question data-exports=question.exports_question
              = sales_value
            input.small.js-trigger-autosave.visuallyhidden tabindex="-1" type="text" name=question.input_name(suffix: "#{y}of#{c.years}") value=sales_value id=question.input_name(suffix: "#{y}of#{c.years}") autocomplete="off" *possible_read_only_ops
    .clear
